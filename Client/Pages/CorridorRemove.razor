@page "/corridorremove"
<div class="container-fluid">
    <h2 class="text-center">Удаление дыма из коридоров</h2>
    <hr class="my-2" />

    <div class="row">
        <div class="col-md-4 col-lg-4 col-xl-3">
            <div class="nav flex-column nav-pills" id="v-pills-tab" role="tablist" aria-orientation="vertical">
                <a class="nav-link active" id="v-pills-home-tab" data-toggle="pill" href="#v-pills-home" role="tab" aria-controls="v-pills-home" aria-selected="true">Помещение и материалы</a>
                <a class="nav-link" id="v-pills-profile-tab" data-toggle="pill" href="#v-pills-profile" role="tab" aria-controls="v-pills-profile" aria-selected="false">Коридор и дверь</a>
                <a class="nav-link" id="v-pills-messages-tab" data-toggle="pill" href="#v-pills-messages" role="tab" aria-controls="v-pills-messages" aria-selected="false">...</a>
                <a class="nav-link" id="v-pills-settings-tab" data-toggle="pill" href="#v-pills-settings" role="tab" aria-controls="v-pills-settings" aria-selected="false">...</a>
            </div>
        </div>
        <div class="col-md-8 col-lg-3 col-xl-4">
            <div class="row">
                <div class="col">
                    <div class="tab-content" id="v-pills-tabContent">
                        <div class="tab-pane fade show active" id="v-pills-home" role="tabpanel" aria-labelledby="v-pills-home-tab">
                            @*inputs*@
                            <InpSingle Label="@_10301_1FieldName" PopTitle="@PopTitle" PopContent="@_10301_1PopContent" NumberChanged="@_10301_1AssignRoomArea" />
                            <InpSingle Label="@_10301_2FieldName" PopTitle="@PopTitle" PopContent="@_10301_2PopContent" NumberChanged="@_10301_2AssignRoomHeight" />
                            <ChipsInput Label="@_10601FieldName" PopTitle="@PopTitle" PopContent="@_10601PopContent" Chips="@_10601Chips" ShowInputOutline="true" EnableBackspaceRemove="true" OnChipsChanged="_10601AssignOpeningArea" OnFocus="_10601ShowToggle" OnFocusOut="_10601HideToggle"></ChipsInput>
                            <_10601IntReport Items="@_10601List" Show="@_10601Show"></_10601IntReport>
                            <InpSingle Label="@_1301FieldName" PopTitle="@PopTitle" PopContent="@_1301PopContent" PopRef="@_1301PopRef" PopLinkText="@_1301PopLink" PopLinkUri="@_1301PopUri" NumberChanged="_1301AssignTempRoomCelsuis" />
                            <InpSingle Label="@_10201FieldName" PopTitle="@PopTitle" PopContent="@_10201PopContent" NumberChanged="@_10201AssignMassMaterial" />
                            <Sel Label="@_10202FieldName" Items="@_10202Items" PopTitle="@PopTitle" PopContent="@_10202PopContent" PopRef="@_10202PopRef" NumberChanged="_10202AssignHeatCombustionMaterial" PopLinkUri="https://rb.gy/dqo5nq" PopLinkText="Теплота сгорания"></Sel>
                        </div>
                        <div class="tab-pane fade" id="v-pills-profile" role="tabpanel" aria-labelledby="v-pills-profile-tab">
                            <InpSingle Label="@_1605AreaCorridorFieldName" PopTitle="@PopTitle" PopContent="@_1605AreaCorridorPopContent" NumberChanged="_1605AssignAreaCorridor" />
                            <InpSingle Label="@_1606LengthCorridorFieldName" PopTitle="@PopTitle" PopContent="@_1606LengthCorridorPopContent" NumberChanged="_1606AssignLengthCorridor" />
                            <InpSingle Label="@_1604_1HeightCorridorFieldName" PopTitle="@PopTitle" PopContent="@_1604_1HeightCorridorPopContent" NumberChanged="_1604_1AssignHeightCorridor" />

                            <InpGroup Label="@_1702_1703FieldName" PopTitle="@PopTitle" PopContent="@_1702_1703PopContent" Number1Changed="_1702AssignDoorWidth" Number2Changed="_1703AssignDoorHeight" />
                        </div>
                        <div class="tab-pane fade" id="v-pills-messages" role="tabpanel" aria-labelledby="v-pills-messages-tab"><em>В разработке...</em></div>
                        <div class="tab-pane fade" id="v-pills-settings" role="tabpanel" aria-labelledby="v-pills-settings-tab"><em>В разработке...</em></div>
                    </div>
                </div>
            </div>

        </div>
        @*//IntResultSingles*@
        <div class="col-lg-5 col-xl-5">
            <IntResultSingle Name="Объём" Val="@__200VolumeRoom" Units="м³" />
            <IntResultSingle Name="Площадь поверхности" Val="@__10300Surface" Units="м²" />
            <IntResultSingle Name="Площадь проёмов" Val="@__10400OpeningArea" Units="м²" />
            <IntResultSingle ClassName1="text-danger" ClassName2="text-danger" Name="Удельная пож. нагр. g₀" Val="@__10100FireLoadRoomArea" Units="кг/м²" />
            <IntResultSingle ClassName1="text-danger" ClassName2="text-danger" Name="Удельная пож. нагр. gₖ" Val="@__10200FireLoadRoomSurf" Units="кг/м²" />
            <IntResultSingle ClassName1="text-danger" ClassName2="text-danger" Name="Критическая пож. нагр." Val="@__10500FireLoadCrit" Units="кг/м²"><HtmlContent>g<sub>kкр</sub></HtmlContent></IntResultSingle>
            @if (__10200FireLoadRoomSurf > __10500FireLoadCrit && !Double.IsInfinity(__10200FireLoadRoomSurf) && !Double.IsInfinity(__10500FireLoadCrit))
            {

                <IntResultSingle Name="Пожар рег. вентиляцией (ПРВ)"></IntResultSingle>
            }
            else if (__10200FireLoadRoomSurf < __10500FireLoadCrit && !Double.IsInfinity(__10200FireLoadRoomSurf) && !Double.IsInfinity(__10500FireLoadCrit))
            {
                <IntResultSingle Name="Пожар рег. нагрузкой (ПРН)"></IntResultSingle>
            }
            <IntResultSingle Name="Теплота сгорания мат." Val="@_10202HeatCombustionMaterial" Units="МДж/кг" />
            <IntResultSingle Name="Проёмность помещения" Val="@__10600OpeningRoomVal" Units="м¹/²" />
            <IntResultSingle Name="Кол-во воздуха для полного сгорания" Val="@__10700FlowAirCompleteCombustion" Units="м³" />
            <IntResultSingle Name="Макс. темп-ра в помещении" Val="@__1300__1400TempRoomMaxCelsuis" Units="°C" />
            <IntResultSingle Name="Температура дыма из помещения" Val="@__1500TempSmokeFromRoomCelsuis" Units="°C" />
            <IntResultSingle Name="Температура дыма в коридоре" Val="@__1600TempSmokeInCorridorCelsuis" Units="°C" />
            <IntResultSingle Name="Расход удал. дыма" Val="@__1700FlowMassSmoke" Units="кг/с" />

        </div>
    </div>
</div>

@inject IJSRuntime js
@using System.Text
@using wasmSmokeMan.Shared.SupplyStaircase.Functions
@inject IMatToaster toast
@*//code*@
@code{
    public bool _10601Show { get; set; }
    void _10601ShowToggle()
    {
        _10601Show = true;
    }
    void _10601HideToggle()
    {
        _10601Show = false;
    }
    List<(double, double)> _10601List { get; set; } = new List<(double, double)>();
    List<string> _10601Chips { get; set; } = new List<string>();
    List<Sel.Item> _10202Items { get; set; } = new List<Sel.Item>()
{
        new Sel.Item
        {
            Name="Лиственные древесные стройматериалы: штабель",
            Val=13.8
        },
        new Sel.Item
        {
            Name="Кабинеты",
            Val=14.0
        },
        new Sel.Item
        {
            Name="Помещения, облицованные панелями ДВП",
            Val=18.1
        },
        new Sel.Item
        {
            Name="Административные помещения",
            Val=14.0
        },
        new Sel.Item
        {
            Name="Общественные здания",
            Val=14.0
        },
        new Sel.Item
        {
            Name="Библиотеки, архивы",
            Val=14.5
        }

    };

    //fields

    public string PopTitle { get; set; } = "Информация";
    public string _1604_1HeightCorridorFieldName { get; set; } = "Высота коридора";
    public string _1604_1HeightCorridorPopContent { get; set; } = "Высота коридора от пола до подвесного потолка при его наличии или просто до потолка. Если потолок решётчатого типа (не сплошной), то высоту нужно брать до перекрытия";
    public string _1605AreaCorridorFieldName { get; set; } = "Площадь коридора";
    public string _1605AreaCorridorPopContent { get; set; } = "Площадь коридора, для которого рассчитывается системы удаления дыма";
    public string _1606LengthCorridorFieldName { get; set; } = "Длина коридора";
    public string _1606LengthCorridorPopContent { get; set; } = "Длина коридора, считается по центральной линии. Если коридор разветвлённый, то принимается самый длинный из путей";


    public string _1301FieldName { get; set; } = "Температура помещения";
    public string _1301PopContent { get; set; } = "Температура помещения. При расчёте противодымной вентиляции используется температура летнего периода по параметрам Б";
    public string _1301PopRef { get; set; } = "СП 131.13330.2018, таблица 4.1, колонка 4";
    public string _1301PopLink { get; set; } = "Строительная климатология";
    public string _1301PopUri { get; set; } = "http://docs.cntd.ru/document/554402860/";
    public string _10301_1FieldName { get; set; } = "Площадь помещения";
    public string _10301_1PopContent { get; set; } = "Площадь помещения, выходящего в коридор. Здесь выбирается самое пожароопасное помещение из всех помещений, выходящих в коридор, из которого планируется удалять дым. Как выбрать самое пожароопасное помещение? Вероятно это должно быть помещение с малым объёмом и большим количеством горючих материалов";
    public string _10301_2FieldName { get; set; } = "Высота помещения";
    public string _10301_2PopContent { get; set; } = "Высота помещения, выходящего в коридор";
    public string _10201FieldName { get; set; } = "Масса материалов";
    public string _10201PopContent { get; set; } = "Масса материалов, которые находятся в помещении, выходящем в коридор";
    public string _10202FieldName { get; set; } = "Теплота сгорания материалов";
    public string _10202PopContent { get; set; } = "Низшая теплота сгорания материалов, которые находятся в помещении, выходящем в коридор";
    public string _10202PopRef { get; set; } = "Мет. рек. к СП 7.13130.2013, прил. 1, пункт 6 (табл.)";
    public string _10205FieldName { get; set; } = "Теплота сгорания древ.";
    public string _10205PopContent { get; set; } = "Теплота сгорания древесины";
    public string _10500FieldName { get; set; } = "Критическая пожарная нагрузка";
    public string _10500PopContent { get; set; } = "Удельное критическое количество пожарной на­грузки";
    public string _10500PopRef { get; set; } = "Меm. рек. к СП 7.13130.2013, прил. 1, пункт 3";
    public string _10600FieldName { get; set; } = "Проёмность помещения";
    public string _10600PopContent { get; set; } = "Показатель проёмности помещения";
    public string _10600PopRef { get; set; } = "Мет.рек. к СП 7.13130.2013, прил. 1, формула 6 по порядку";
    public string _10601FieldName { get; set; } = "Ширина и высота проёмов помещения";
    public string _10601PopContent { get; set; } = "Ширина и высота проёмов помещения. Для каждого проёма нужно ввести в поле ширину и высоту через точку-с-запятой <code>[ширина];[высота]</code> и затем нажать <code>Enter</code>. Повторить процедуру для каждого проёма помещения";
    public string _10100FieldName { get; set; } = "Приведённая пожарная нагрузка";
    public string _10200FieldName { get; set; } = "Приведённая пожарная нагрузка";
    public string _10100PopContent { get; set; } = "Удельная приведенная пожарная нагрузка, отнесен­ная к площади пола помещения";
    public string _10100PopRef { get; set; } = "Меm. рек. к СП 7.13130.2013, прил. 1, пункт 1";
    public string _10200PopContent { get; set; } = "Удельная приведенная пожарная нагрузка, отнесен­ная к площади тепловоспринимающей поверхности ограж­дающих строительных конструкций помещения";
    public string _10200PopRef { get; set; } = "Меm. рек. к СП 7.13130.2013, прил. 1, пункт 2";
    public string _1702_1703FieldName { get; set; } = "Ширина и высота двери";
    public string _1702_1703PopContent { get; set; } = "Ширина и высота двери из коридора по пути эвакуации (например в лестничную клетку)";
    //здесь поля для промежуточных вычисляемых результатов
    //results
    //результат - объём помещения
    public double __200VolumeRoom { get; set; } = 0;
    //результат - кол-во удаляемого дыма из коридора на этаже пожара
    public double __1700FlowMassSmoke { get; set; } = 0;
    //результат - площадь внутренней поверхности помещения
    public double __10300Surface { get; set; } = 0;
    //результат - удельная приведённая пожарная нагрузка, отнесённая к площади пола g0 - формула 101
    public double __10100FireLoadRoomArea { get; set; } = 0;
    //результат - удельная приведённая пожарная нагрузка, отнесённая к площади тепловоспринимающей поверхности gk - формула 102
    public double __10200FireLoadRoomSurf { get; set; } = 0;
    //результат - удельное критическое количество пожарной нагрузки
    public double __10500FireLoadCrit { get; set; } = 0;
    //результат - площадь проёмов
    public double __10400OpeningArea { get; set; } = 0;
    //результат - проёмность помещения - приложение 1 формула 6
    public double __10600OpeningRoomVal { get; set; } = 0;
    //результат - количество воздуха, необходимое для полного сгорания нагрузки помещения - приложение 1 формула 7
    public double __10700FlowAirCompleteCombustion { get; set; } = 0;
    //результат - максимальная температура в горящем помещении - одно свойство для двух случаем (ПРВ и ПРН)
    private double __1300__1400tempRoomMax;
    public double __1300__1400TempRoomMax
    {
        get => this.__1300__1400tempRoomMax;
        set
        {
            this.__1300__1400tempRoomMax = value;
        }
    }
    public double __1300__1400TempRoomMaxCelsuis
    {
        get
        {
            if (this.__1300__1400tempRoomMax > 0)
            {
                return this.__1300__1400tempRoomMax - 273;
            }
            else
            {
                return 0;
            }
        }
    }
    private double __1500tempSmokeFromRoom;
    public double __1500TempSmokeFromRoom
    {
        get => this.__1500tempSmokeFromRoom;
        set
        {
            this.__1500tempSmokeFromRoom = value;
        }
    }
    public double __1500TempSmokeFromRoomCelsuis
    {
        get
        {
            if (this.__1500tempSmokeFromRoom > 0)
            {
                return this.__1500tempSmokeFromRoom - 273;
            }
            else
            {
                return 0;
            }
        }
    }
    private double __1600tempSmokeInCorridor;
    public double __1600TempSmokeInCorridor
    {
        get => this.__1600tempSmokeInCorridor;
        set
        {
            this.__1600tempSmokeInCorridor = value;
        }
    }
    public double __1600TempSmokeInCorridorCelsuis
    {
        get
        {
            if (this.__1600tempSmokeInCorridor > 0)
            {
                return this.__1600tempSmokeInCorridor - 273;
            }
            else
            {
                return 0;
            }
        }
    }
    protected override async Task OnAfterRenderAsync(bool first)

    {
        await js.InvokeVoidAsync("funcs.pop");
        await js.InvokeVoidAsync("funcs.selectpicker");

    }
    //переменные, которые назначаются при работе с полями
    //values
    public double _10301_1RoomArea { get; set; }
    public double _10301_2RoomHeight { get; set; }
    public double _1702DoorWidth { get; set; }
    public double _1703DoorHeight { get; set; }
    public double _10202HeatCombustionMaterial { get; set; }
    public double _10201MassMaterial { get; set; }
    public double _10205HeatCombustionWood { get; set; }
    public double _1301TempRoomCelsius { get; set; }
    public double _1604_1HeightCorridor { get; set; }
    public double _1605AreaCorridor { get; set; }
    public double _1606LengthCorridor { get; set; }



    void _10601AssignOpeningArea()
    {
        try
        {
            //если при вызове метода в поле ничего нет, то ничего не происходит, просто коллекция очищается
            if (_10601Chips.Count == 0)
            {
                _10601List.Clear();
            }
            //в этом блоке при каждом добавлении или удалении элемента в коллекцию _10601List добавляются и обрабатываются все элементы из коллекции _10601Chips
            //то есть строка разделяется по разделителю ; затем преобразуется в double и для элемента Item1 кортежа вычисляется площадь путём перемножения того, что было до знака ; и того, что было после этого знака
            else
            {

                _10601List.Clear();
                foreach (var item in _10601Chips)
                {
                    _10601List.Add((Convert.ToDouble(item.Split(';')[0]) * Convert.ToDouble(item.Split(';')[1]), Convert.ToDouble(item.Split(';')[1])));

                }

            }
            //здесь вычисляется сумма площадей проёмов для формулы 4 в приложении 1
            __10400OpeningArea = _10601List.Sum(x => x.Item1);
        }
        catch (Exception ex)
        {

            toast.Add(ex.Message, MatToastType.Danger);
        }
        //затем вызывается метод для вычисления приведённой пожарной нагрузки (формула 2 в приложении 1)
        CompAll();
    }
    //assignings
    void _1604_1AssignHeightCorridor(string heightCorridor)
    {
        _1604_1HeightCorridor = Convert.ToDouble(heightCorridor);
        CompAll();
    }
    void _1605AssignAreaCorridor(string areaCorridor)
    {
        _1605AreaCorridor = Convert.ToDouble(areaCorridor);
        CompAll();
    }
    void _1606AssignLengthCorridor(string lengthCorridor)
    {
        _1606LengthCorridor = Convert.ToDouble(lengthCorridor);
        CompAll();
    }
    void _1301AssignTempRoomCelsuis(string tempRoom)
    {
        _1301TempRoomCelsius = Convert.ToDouble(tempRoom);
        CompAll();

    }
    void _10301_1AssignRoomArea(string roomArea)
    {
        _10301_1RoomArea = Convert.ToDouble(roomArea);
        CompAll();

    }
    void _10301_2AssignRoomHeight(string roomHeight)
    {
        _10301_2RoomHeight = Convert.ToDouble(roomHeight);
        CompAll();
    }
    void _1702AssignDoorWidth(string doorWidth)
    {
        _1702DoorWidth = Convert.ToDouble(doorWidth);
        Comp17();
    }
    void _1703AssignDoorHeight(string doorHeight)
    {
        _1703DoorHeight = Convert.ToDouble(doorHeight);
        Comp17();
    }
    void _10201AssignMassMaterial(string massMaterial)
    {
        _10201MassMaterial = Convert.ToDouble(massMaterial);
        CompAll();
    }
    void Comp13Comp14()
    {
        if (__10200FireLoadRoomSurf >= __10500FireLoadCrit && !Double.IsInfinity(__10200FireLoadRoomSurf) && !Double.IsInfinity(__10500FireLoadCrit))
        {
            Comp13();
        }
        else if (__10200FireLoadRoomSurf < __10500FireLoadCrit && !Double.IsInfinity(__10200FireLoadRoomSurf) && !Double.IsInfinity(__10500FireLoadCrit))
        {

            Comp14();
        }
    }
    void _10202AssignHeatCombustionMaterial(string heatCombustionMaterial)
    {
        _10202HeatCombustionMaterial = Convert.ToDouble(heatCombustionMaterial);
        CompAll();

    }
    //computations
    //все выражения с вычислением значений
    void CompAll()
    {
        //формулы здесь должны идти в правильном порядке (НЕ в порядке сортировки по номерам)
        Comp200();
        Comp106();
        Comp103();
        Comp101();
        Comp102();
        Comp107();
        Comp105();
        Comp13Comp14();
        Comp15();
        Comp16();
    }
    //формула 17 - массовый расход дыма удаляемого из коридора
    void Comp17()
    {
        F17 f17 = new F17(_1702DoorWidth, _1703DoorHeight, 1);
        __1700FlowMassSmoke = Math.Round(f17.Comp(), 4);
    }
    //дополнительная формула - объём помещения
    void Comp200()
    {
        F200 f200 = new F200(_10301_1RoomArea, _10301_2RoomHeight);
        __200VolumeRoom = Math.Round(f200.Comp(), 2);
    }
    //приложение формула - удельная приведённая пожарная нагрузка, отнесённая к площади помещения, номер 101 (1-ая формула в приложении 1)
    void Comp101()
    {
        F101 f101 = new F101(_10201MassMaterial, _10202HeatCombustionMaterial, _10301_1RoomArea);
        __10100FireLoadRoomArea = Math.Round(f101.Comp(), 3);
    }
    //приложение формула - удельная приведённая пожарная нагрузка, отнесённая к площади тепловоспринимающей поверхности номер 102 (2-ая формула в приложении 1)
    void Comp102()
    {
        F102 f102 = new F102(_10201MassMaterial, _10202HeatCombustionMaterial, __10300Surface, __10400OpeningArea);
        __10200FireLoadRoomSurf = Math.Round(f102.Comp(), 3);
    }
    //приложение формула - площадь внутренней поверхности, номер 103 (3-я формула в приложении 1)
    void Comp103()
    {
        F103 f103 = new F103(__200VolumeRoom);
        __10300Surface = Math.Round(f103.Comp(), 2);
    }
    //приложение формула - проёмность помещения (6-ая формула в приложении 1)
    void Comp106()
    {
        F106 f106 = new F106(_10601List, __200VolumeRoom);
        __10600OpeningRoomVal = Math.Round(f106.Comp(), 3);
    }
    //приложение формула - удельное количество воздуха, необходимое для сгорания 1 кг пожарной нагрузки (материалов помещения)
    void Comp107()
    {
        F107 f107 = new F107(_10202HeatCombustionMaterial);
        __10700FlowAirCompleteCombustion = Math.Round(f107.Comp(), 3);
    }
    //приложение формула - критическое удельное количество пожарной нагрузки
    void Comp105()
    {
        F105 f105 = new F105(__10600OpeningRoomVal, __10700FlowAirCompleteCombustion, __200VolumeRoom);
        __10500FireLoadCrit = Math.Round(f105.Comp(), 3);
    }
    //формула 13 - максимальная температура в горящем помещении ПРВ
    void Comp13()
    {
        F13 f13 = new F13(_1301TempRoomCelsius, __10100FireLoadRoomArea);
        __1300__1400TempRoomMax = Math.Round(f13.Comp(), 0);

    }
    //формула 14 - максимальная температура в горящем помещении ПРН
    void Comp14()
    {
        F14 f14 = new F14(_1301TempRoomCelsius, __10200FireLoadRoomSurf);
        __1300__1400TempRoomMax = Math.Round(f14.Comp(), 0);
    }
    void Comp15()
    {
        F15 f15 = new F15(__1300__1400TempRoomMax);
        __1500TempSmokeFromRoom = Math.Round(f15.Comp(), 0);
    }
    void Comp16()
    {
        F16 f16 = new F16(_1301TempRoomCelsius, __1500TempSmokeFromRoom, _1604_1HeightCorridor, _1605AreaCorridor, _1606LengthCorridor);
        __1600TempSmokeInCorridor = Math.Round(f16.Comp(), 0);
    }

}

